pipeline {
    agent {
        docker {
            image 'python:3.11'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        SONARQUBE = credentials('sonar-token')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/krahyor/jartkitv.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'python3.11 -m venv venv'
                sh './venv/bin/pip install --no-cache-dir --upgrade pip'
                sh './venv/bin/pip install --no-cache-dir -r ./fastapi-app/requirements.txt'
                sh './venv/bin/pip install --no-cache-dir pysonar coverage'
            }
        }

        stage('Run Tests & Coverage') {
            steps {
                sh './venv/bin/pytest fastapi-app/tests/ --maxfail=1 --disable-warnings -q'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-token') {
                    sh '''
                        export SONAR_TOKEN=$SONARQUBE
                        apt-get update && apt-get install -y wget unzip
                        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux.zip
                        unzip -o sonar-scanner-cli-6.2.1.4610-linux.zip -d /opt
                        /opt/sonar-scanner-6.2.1.4610-linux/bin/sonar-scanner
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t fastapi-app:latest .'
            }
        }

        stage('Deploy Container') {
            steps {
                sh 'docker run -d -p 8000:8000 fastapi-app:latest'
            }
        }
    }

    post {
        always {
            echo "Pipeline finished"
        }
    }
}